<!DOCTYPE html>
<html>
<head>
    <title>Library</title>
    <link rel="stylesheet" href="..\css\main.css">
</head>
<body>
<?php require_once '../option/nav.php'; ?>
<?php require_once '../include/functions.php'; ?>


<h1 align='center'>Конструкции языка</h1>

<h2 >Инструкции if-else</h2>
    <pre>
        if (логическое_выражение)
            инструкция_1;
        else
            инструкция_2;
    </pre>
    <p>Если несколько команд</p>
        <pre>
            if (логическое_выражение)
                инструкция_1;
            elseif
                инструкция_2;
            else
                инструкция_3:
        </pre>
    <p>Еще один вариант if-else двоеточие вмество {} и endif в конце</p>
        <pre>
            if (логическое_выражение):
                другие_комнды;
            else:
                Иначе_команды;
            endif
        </pre>

<h2>Цикл с предусловием while</h2>
        <pre>
            while(логическое_выражение)
                инструкция;
        </pre>
        <pre>
            while(логическое_выражение):
                команды;
            endwhile;
        </pre>

<h2>Цикл с постусловием do-while</h2>
    <p>Условие выполняется хотя бы один раз(оочень редко применяется, альтернативного синтаксиса нет)</p>
        <pre>
            do{
                команды:
            }while(логическое_выражение);
        </pre>

<h2>Цикл for универсальный</h2>
        <pre>
            for (инициализираующие_команды; условие_цикла; команды_после_прохода)
                тело_цикла;
        </pre>
    <p>альтернативный синтаксис</p>
        <pre>
            for (инициализираующие_команды; условие_цикла; команды_после_прохода):
                операторы;
            endfor;
        </pre>

<h2>break и continue</h2>
    <p>
        break прерывает цикл и выходит из него, существует необязательный параметр число показываеющее из какого вложеного
        цикла должен быть осуществлен выход
    </p>
    <pre>
        for ($i = 0; $i < count($matrix); $i++) {
            for ($j = 0; $j < count($matrix[i]); $j++){
                if ($matrix[$i][$j] == 0) break(2);
            }
        }
        if($i < 10) echo 'Найден нулевой элемент в матрице!';
    </pre>
    <p>
        continue похоже на break но не прерывает цикл, а заканчивает текущую итерацию,
        существует необязательный параметр число показываеющее какой вложенный цикл должен быть проложен.
    </p>
<h2>Цикл foreach</h2>
    <pre>
        foreach(массив as $ключ => $значение)
        команды;
    </pre>
    <p>
        <?php
            foreach($_SERVER as $k => $v){
                echo "$k => <tt>$v</tt><br />";
            }
        ?>
    </p>
    <p>
        Вторая форма записи
    </p>
    <pre>
        foreach ($массив as $значение)
            команды;
    </pre>
    <p>
        <b>Изначально мы работаем с копием массива в цикле, основной не изменяется.
            Для изменения основного массива можно воспользоваться жесткой ссылкой &</b>
    </p>
    <pre>
        foreach($массив as $ключ => &$значение){
            //теперь можно изменить значение массива, при этом изменится основной массив
        }
    </pre>
    <h2>Конструкция switch case</h2>
    <pre>
        switch (выражени){
            case значение1: команды1; [break;]
            case значение2: команды2; [break;]
            case значение3: команды3; [break;]
            [default: команды_по_умолчанию; [break]]
        }
    </pre>
    <p>альтернативный синтаксис</p>
    <pre>
        switch (выражени):
            case значение1: команды1; [break;]
            case значение2: команды2; [break;]
            case значение3: команды3; [break;]
            [default: команды_по_умолчанию; [break]]
        endswitch;
    </pre>

    <h2>Конструкция switch case</h2>
    <p>позволяет осущестлять безусловный переход на метку.</p>
    <pre>
        goto метка:
        ...
        метка:
    </pre>

    <h2>Инструкции require и include</h2>
    <p>Позовляет разбить текст программы на несколько файлов.</p>
    <p>
        Отличие require и include Заключается в том, <B>что при require, если файл не найден выполнение скрипта приостанавливается(Лучее)</B>.
        при include выполнение продолжается.
    </p>
    <p>
        Отличие require_once от require заключается в том, <B>что при require_once, если включенны случайно одинаковые файлы
        то второй автоматически не выполняется, дабы избежать ошибки.(ЛУчшее)</B>. Если использовать просто require, то может возникнуть
        ошибка связанная с одинаковыми именнами, например, функций во вклченных фалайх. По возможно везде применять require_once.
    </p>
    <pre>
        require имя_файла;
        include имя_файла;
        require_once имя_файла;
        include_once имя_файла;
    </pre>
    <p>при запуске вместо имя_файла подставится файл. Можно использовать для включения частей например footer, nav, header.</p>
</body>
</html>

